{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"YERP!: Your Emergency Response Platform \u00b6 Semi-Automated Bathroom Communism \u00b6 graph Off --> Power --> DoorStandby --> Closed --> WarmupTimer --> Standby; Standby --> DoorOpens & Activity; Activity --> Spotting; Spotting --> DoorOpens & Activity; Spotting --> 50Thresh --> 75Thresh --> WellnessCheck 50Thresh --> Activity & DoorOpens 75Thresh --> Activity & DoorOpens DoorOpens --> Standby Spotting --> DurationTimer --> DoorOpens & DurationBell WellnessCheck --> FalsePositive & TheyreOK & TheyLeft & GetHelp FalsePositive --> Standby TheyreOK --> Spotting TheyLeft --> Standby","title":"YERP!: Your Emergency Response Platform"},{"location":"#yerp-your-emergency-response-platform","text":"","title":"YERP!: Your Emergency Response Platform"},{"location":"#semi-automated-bathroom-communism","text":"graph Off --> Power --> DoorStandby --> Closed --> WarmupTimer --> Standby; Standby --> DoorOpens & Activity; Activity --> Spotting; Spotting --> DoorOpens & Activity; Spotting --> 50Thresh --> 75Thresh --> WellnessCheck 50Thresh --> Activity & DoorOpens 75Thresh --> Activity & DoorOpens DoorOpens --> Standby Spotting --> DurationTimer --> DoorOpens & DurationBell WellnessCheck --> FalsePositive & TheyreOK & TheyLeft & GetHelp FalsePositive --> Standby TheyreOK --> Spotting TheyLeft --> Standby","title":"Semi-Automated Bathroom Communism"},{"location":"Contact/","text":"","title":"Contact"},{"location":"Screenshots/","text":"","title":"Screenshots"},{"location":"Troubleshooting/","text":"","title":"Troubleshooting"},{"location":"Features/LaTeX%20Math%20Support/","text":"LaTeX Math Support \u00b6 LaTeX math is supported using MathJax. Inline math looks like \\(f(x) = x^2\\) . The input for this is $f(x) = x^2$ . Use $...$ . For a block of math, use $$...$$ on separate lines $$ F(x) = \\int^a_b \\frac{1}{2}x^4 $$ gives \\[ F(x) = \\int^a_b \\frac{1}{2}x^4 \\]","title":"LaTeX Math Support"},{"location":"Features/LaTeX%20Math%20Support/#latex-math-support","text":"LaTeX math is supported using MathJax. Inline math looks like \\(f(x) = x^2\\) . The input for this is $f(x) = x^2$ . Use $...$ . For a block of math, use $$...$$ on separate lines $$ F(x) = \\int^a_b \\frac{1}{2}x^4 $$ gives \\[ F(x) = \\int^a_b \\frac{1}{2}x^4 \\]","title":"LaTeX Math Support"},{"location":"Features/Mermaid%20Diagrams/","text":"Mermaid diagrams \u00b6 Here's the example from MkDocs Material documentation : graph LR A[Start] --> B{Error?}; B -->|Yes| C[Hmm...]; C --> D[Debug]; D --> B; B ---->|No| E[Yay!];","title":"Mermaid diagrams"},{"location":"Features/Mermaid%20Diagrams/#mermaid-diagrams","text":"Here's the example from MkDocs Material documentation : graph LR A[Start] --> B{Error?}; B -->|Yes| C[Hmm...]; C --> D[Debug]; D --> B; B ---->|No| E[Yay!];","title":"Mermaid diagrams"},{"location":"Features/Text%20Formatting/","text":"Text Formatting \u00b6 You can have lists like this first second third Or checklist lists to Get things done Also, get highlights and strikethroughs as above (similar to Obsidian). More formatting options for your webpage here . (but not compatible with Obsidian)","title":"Text Formatting"},{"location":"Features/Text%20Formatting/#text-formatting","text":"You can have lists like this first second third Or checklist lists to Get things done Also, get highlights and strikethroughs as above (similar to Obsidian). More formatting options for your webpage here . (but not compatible with Obsidian)","title":"Text Formatting"},{"location":"Getting%20Started/Installation%20%28HP%20T620%29/","text":"Install Home Assistant: Install SSD and RAM into your T620 Install HA Supervised by flashing it to a SSD with an adapter (skip to step 7 if you have this, otherwise continue to do it via live boot) Put a Linux distro of your choice onto a USB (I like to use Ventoy for plenty of options) Boot into that distro, install BalenaEtcher, grab the current URL for the Home Assistant .img.gz for x86 from the Home Assistant github Open BalenaEtcher and copy the .img.gz to the internal disk Restart the T620, remove the USB Once the command line interface comes up, you need to get the thing online. Ethernet is the best option here, but if you need wifi that needs to be configured via prompt. It'll be something like: network update wl1ps0 --wifi-ssid \"NETWORK_NAME\" --wifi-mode wpa-psa --wifi-key password --wifi-dhcp auto ..and then it should update and connect. If it says successful you can type network info , look for something in there with the wifi SSID. Also if you use the exit command, HA will show you the welcome message again, that has the IP the machine was assigned. Do a reset on the thing: host reboot Once the welcome screen comes up again, your instance should come up in a web browser. If you had a keyboard and monitor or KVM, etc. plugged in, you can disconnect them now, everything else will be done via browser (or shell, optionally). Pull up that URL and take a break, HA needs a few minutes to get ready. (If this takes over 20 minutes, there's likely something wrong with your install. The easiest fix is starting over, cloning a new image onto your SSD.) Configure Home Assistant Once you've got an account set up for yourself, go to your settings page (it's your name, lower left corner) and turn on advanced mode. You may also want to set dark mode for yourself, that's here too. Head to Settings %3E Add-On's; we've got quite a few to install. Some of these need others for their own installation processes, so an order like this should help: Studio Code Server (or File Editor), SSH & Web Terminal (or the other SSH one, if you don't mind doing some commands via shell outside of the browser), Mosquitto Broker, MariaDB, InfluxDB, Nginx Proxy Manager, VLC. And then these ones as well, which require you to add their repos first: Zigbee2MQTT, PicoTTS, Cloudflared OK, time to configure all of these. I'll link some youtube walkthroughs here. Head to Settings > Integrations to Set up Mosquitto and core-vlc. Install HACS . You can wait on resetting since you'll have to in a second for the next step: Set up PicoTTS , via editor. Reset. *incomplete, but posted for viewing / feedback / contributions>)","title":"Installation (HP T620)"},{"location":"Getting%20Started/Installation/","text":"Installation \u00b6 (Needs updating!) \u00b6 First things first: this is not yet a tried and tested solution. Installations of YERP! should be done at this point for testing and development. And any testing out in the world should be done alongside already functioning emergency/bathroom protocols to address overdose/medical emergencies. Second things second: simplifying this installation process is a primary concern for this project! Much of this process, certainly everything that comes after the steps for setting up Home Assistant and HACS, can hypothetically become far more simplified given the right code (sadly beyond this current developer's current skill set, though I'll learn as I can! If you'd like to support the project, either sponsoring funding for some outside help here or contributing this as a programmer yourself would be especially helpful!). Some working knowledge of Home Assistant and its lexicon will definitely be helpful. If you're not up on such things, Youtube tutorials are a great place to start. System requirements \u00b6 Running installation of Home Assistant Motion sensor, preferably one with a short buffer time* Door sensor Z-Wave/Zigbee radio (dependent on the devices being used) Optional components \u00b6 Siren Speaker Smart button Smart RGBW Bulb Tablet or smartphone with Home Assistant app installed *Most smart-enabled motion sensors deactivate for a given amount of time after sensing motion to conserve battery life. This commonly ranges from 30 seconds to 2-5 minutes. We've been using Ecolink PIRZWAVE-2.5 sensors, because they have a built in dipswitch for a \"testing mode\". In some iterations of the sensor that means 5 seconds and in others 7, but either way it's short enough for our purposes. Other options include a hack for Xiaomi AqaraPIR sensors to enable a 5 second buffer (hasn't been tested with YERP! yet but sounds pretty nice!), and DIY sensors built with ESP boards like the Wemos D1 Mini and HC-SR501 sensors (which run around $5 in parts, would need some sort of enclosure, and can run on ESPHome or Tasmota) Installing and setting up Home Assistant \u00b6 See Home Assistant's documentation on how to get an installation up and running. Once that's set, HACS (Home Assistant Community Store) will need to be installed, as many parts of this platform rely on community contributions to Home Assistant best accessed and updated this way. Setting up Home Assistant to work as a YERP! Installation \u00b6 From here you can either clone this repo into your Home Assistant's config directory, or add sections piecemeal from this repo in a more piecemeal fashion. The configuration.yaml file in this repo (in the .config/ folder in most HA installations) is the main config file for Home Assistant. The version included here uses another yaml file, secrets.yaml, pretty extensively (it's considered best practice to keep your more sensitive info like device login info, GPS coordinates, API keys etc here.. case in point, it's how this repo can include our configuration.yaml file without disclosing any of that), so you'll want to make one of these and cater it to your install. There are a few more files in this repo that you'll want to include versions of in your install: scenes.yaml acts as a holder for various states smart bulbs should take during the YERP! spotting process. scripts.yaml which contains a script that resets a given YERP! instance. sensors.yaml creates some entities used to monitor an instance, including some an instances uses for calculations that run the spotting process automations.yaml which contains most of the working parts of an installation. These all contain tags in the entity names as to which YERP! instance they're corresponding to. These files specifcally reference the development installation at Cool Industries, tagged in entity IDs with inst_cool and in entity names as [Inst Cool]. Doing a mass find and replace can adjust this to a tag suited to your installation, and is currently the same process to run multiple YERP! instances off of one Home Assistant installation (simply paste in multiple sets with different tags). From here, you'll need to manually create the \"helpers\" on which YERP! also relies (to do: add a list of these). They're all referenced in the automations.yaml file, and are mostly counters. You'll also want to edit references to a device in the YERP! automations with the Home Assistant app installed, for sending out notifications as to what's happening in a given YERP! instance. Searching \"fluffphone\" (hi it's me Michael, who often uses Fluffy / Fluff / Flufftronix as a handle) in automations.yaml should yield these automations, or in the HA Automations GUI they're listed by name as notifications. For testing purposes in the development installation they only go out to one phone, but using a different entity can alert all phones/tablets set up with a given installation. (Control over this via HA Dashboard is coming soon!) So edit this as appropriate for your install. There are also some \"virtual participant\" automations, which are in here but not quite reliably functional yet. I'll leave the documentation here for once the functionality is up and running. Finally, this leaves the interface by which you'll be most often interacting with YERP!, via Home Assistant's dashboard functionality. A few widgets are included here, which can be edited via the same find and replace tags you used earlier. To add these into your installation edit your dashboard, and paste these in as widgets. You should now have an installation that's up to date with the current development version, ready for testing and experimentation. (This is also the first version of an install walkthrough, so if there's anything that's missing please feel free to open an issue or submit a pull request)","title":"Installation"},{"location":"Getting%20Started/Installation/#installation","text":"","title":"Installation"},{"location":"Getting%20Started/Installation/#needs-updating","text":"First things first: this is not yet a tried and tested solution. Installations of YERP! should be done at this point for testing and development. And any testing out in the world should be done alongside already functioning emergency/bathroom protocols to address overdose/medical emergencies. Second things second: simplifying this installation process is a primary concern for this project! Much of this process, certainly everything that comes after the steps for setting up Home Assistant and HACS, can hypothetically become far more simplified given the right code (sadly beyond this current developer's current skill set, though I'll learn as I can! If you'd like to support the project, either sponsoring funding for some outside help here or contributing this as a programmer yourself would be especially helpful!). Some working knowledge of Home Assistant and its lexicon will definitely be helpful. If you're not up on such things, Youtube tutorials are a great place to start.","title":"(Needs updating!)"},{"location":"Getting%20Started/Installation/#system-requirements","text":"Running installation of Home Assistant Motion sensor, preferably one with a short buffer time* Door sensor Z-Wave/Zigbee radio (dependent on the devices being used)","title":"System requirements"},{"location":"Getting%20Started/Installation/#optional-components","text":"Siren Speaker Smart button Smart RGBW Bulb Tablet or smartphone with Home Assistant app installed *Most smart-enabled motion sensors deactivate for a given amount of time after sensing motion to conserve battery life. This commonly ranges from 30 seconds to 2-5 minutes. We've been using Ecolink PIRZWAVE-2.5 sensors, because they have a built in dipswitch for a \"testing mode\". In some iterations of the sensor that means 5 seconds and in others 7, but either way it's short enough for our purposes. Other options include a hack for Xiaomi AqaraPIR sensors to enable a 5 second buffer (hasn't been tested with YERP! yet but sounds pretty nice!), and DIY sensors built with ESP boards like the Wemos D1 Mini and HC-SR501 sensors (which run around $5 in parts, would need some sort of enclosure, and can run on ESPHome or Tasmota)","title":"Optional components"},{"location":"Getting%20Started/Installation/#installing-and-setting-up-home-assistant","text":"See Home Assistant's documentation on how to get an installation up and running. Once that's set, HACS (Home Assistant Community Store) will need to be installed, as many parts of this platform rely on community contributions to Home Assistant best accessed and updated this way.","title":"Installing and setting up Home Assistant"},{"location":"Getting%20Started/Installation/#setting-up-home-assistant-to-work-as-a-yerp-installation","text":"From here you can either clone this repo into your Home Assistant's config directory, or add sections piecemeal from this repo in a more piecemeal fashion. The configuration.yaml file in this repo (in the .config/ folder in most HA installations) is the main config file for Home Assistant. The version included here uses another yaml file, secrets.yaml, pretty extensively (it's considered best practice to keep your more sensitive info like device login info, GPS coordinates, API keys etc here.. case in point, it's how this repo can include our configuration.yaml file without disclosing any of that), so you'll want to make one of these and cater it to your install. There are a few more files in this repo that you'll want to include versions of in your install: scenes.yaml acts as a holder for various states smart bulbs should take during the YERP! spotting process. scripts.yaml which contains a script that resets a given YERP! instance. sensors.yaml creates some entities used to monitor an instance, including some an instances uses for calculations that run the spotting process automations.yaml which contains most of the working parts of an installation. These all contain tags in the entity names as to which YERP! instance they're corresponding to. These files specifcally reference the development installation at Cool Industries, tagged in entity IDs with inst_cool and in entity names as [Inst Cool]. Doing a mass find and replace can adjust this to a tag suited to your installation, and is currently the same process to run multiple YERP! instances off of one Home Assistant installation (simply paste in multiple sets with different tags). From here, you'll need to manually create the \"helpers\" on which YERP! also relies (to do: add a list of these). They're all referenced in the automations.yaml file, and are mostly counters. You'll also want to edit references to a device in the YERP! automations with the Home Assistant app installed, for sending out notifications as to what's happening in a given YERP! instance. Searching \"fluffphone\" (hi it's me Michael, who often uses Fluffy / Fluff / Flufftronix as a handle) in automations.yaml should yield these automations, or in the HA Automations GUI they're listed by name as notifications. For testing purposes in the development installation they only go out to one phone, but using a different entity can alert all phones/tablets set up with a given installation. (Control over this via HA Dashboard is coming soon!) So edit this as appropriate for your install. There are also some \"virtual participant\" automations, which are in here but not quite reliably functional yet. I'll leave the documentation here for once the functionality is up and running. Finally, this leaves the interface by which you'll be most often interacting with YERP!, via Home Assistant's dashboard functionality. A few widgets are included here, which can be edited via the same find and replace tags you used earlier. To add these into your installation edit your dashboard, and paste these in as widgets. You should now have an installation that's up to date with the current development version, ready for testing and experimentation. (This is also the first version of an install walkthrough, so if there's anything that's missing please feel free to open an issue or submit a pull request)","title":"Setting up Home Assistant to work as a YERP! Installation"},{"location":"Reference/Glossary/","text":"Glossary \u00b6 Activity: A true/false state for indicating a user being spotted is active and, in terms of the potential emergencies this framework is made to look for, not in need of assistance. Can currently be picked up by sensor by PIR or millimeter wave sensors, and can also be indicated manually by the user pressing a button. Area: The highest level container, designates an area that's being monitored. With its own set of physical devices and, inside of Home Assistant: automations, scripts, data, packages. If an area is enabled, the session flow can take place. If it's disabled, it can't. Boilerplate: A standardized template for a YERP area. When a new area is added via script, a new copy of the base boilerplate is created and configured to use that new area's name. Complete: The end of a session. Regardless of outcome, this indicates that spotting was engaged and has finished. Activates triggers to assess why the session was marked as completed, complete the appropriate response, and record the session metrics to the long-term database. Datetime: A standard format containing, in order: year, month, day, hour, minute, seconds and timezone offset. Entity: A Home Assistant term for an individual store of data; can be anything from sensors to on/off switches to text or date, etc. Gate: An open/close sensor like a door, but could also be something like a desk drawer or a fold-down table. The standard setup is configured so that in the case of an open/close sensor on a door and its frame, a gate marked as On means that this door is closed. Host: Anyone responsible for overseeing YERP!'s spotting and responding to wellness checks. Inverted Gate: Reverse on and off for a gate, so that the session flow will progress when the gate is marked as Off, and be prevented from starting and/or completed when it's marked as On. Idle: When spotting is active, and the activity sensor isn't indicating any activity. Measured in seconds. This is what's used to move the flow from spotting to seekinghelp, along with any user-added flags along the way. Last Session: Refers to a session, spotting, or idle time that's not currently happening. Session: The time in which a visitor is present in the area, and that area is being spotted. Session Flow: The process of moving from the beginning of a session to its completion, regardless of the outcome. Spotting: When an area is being actively monitored for indications of concern and potential emergency. This Session Refers to a session or spotting that's currently active in the present. Timestamp: UNIX Timestamp, which indicates seconds since January 1st, 1970. This is used for calculations, since Home Assistant can't do this directly in Datetime format. Tutorial: A session flow which includes on-screen and/or audio explanations of what's going on, for users unfamiliar with YERP. If temporary mode is turned on, only the next session flow will take place with these added prompts. Visitor: Anyone being spotted by YERP! Wellness Check: When YERP!'s spotting threshold timer expires, this the prompt for human intervention to see if a visitor is alright.","title":"Glossary"},{"location":"Reference/Glossary/#glossary","text":"Activity: A true/false state for indicating a user being spotted is active and, in terms of the potential emergencies this framework is made to look for, not in need of assistance. Can currently be picked up by sensor by PIR or millimeter wave sensors, and can also be indicated manually by the user pressing a button. Area: The highest level container, designates an area that's being monitored. With its own set of physical devices and, inside of Home Assistant: automations, scripts, data, packages. If an area is enabled, the session flow can take place. If it's disabled, it can't. Boilerplate: A standardized template for a YERP area. When a new area is added via script, a new copy of the base boilerplate is created and configured to use that new area's name. Complete: The end of a session. Regardless of outcome, this indicates that spotting was engaged and has finished. Activates triggers to assess why the session was marked as completed, complete the appropriate response, and record the session metrics to the long-term database. Datetime: A standard format containing, in order: year, month, day, hour, minute, seconds and timezone offset. Entity: A Home Assistant term for an individual store of data; can be anything from sensors to on/off switches to text or date, etc. Gate: An open/close sensor like a door, but could also be something like a desk drawer or a fold-down table. The standard setup is configured so that in the case of an open/close sensor on a door and its frame, a gate marked as On means that this door is closed. Host: Anyone responsible for overseeing YERP!'s spotting and responding to wellness checks. Inverted Gate: Reverse on and off for a gate, so that the session flow will progress when the gate is marked as Off, and be prevented from starting and/or completed when it's marked as On. Idle: When spotting is active, and the activity sensor isn't indicating any activity. Measured in seconds. This is what's used to move the flow from spotting to seekinghelp, along with any user-added flags along the way. Last Session: Refers to a session, spotting, or idle time that's not currently happening. Session: The time in which a visitor is present in the area, and that area is being spotted. Session Flow: The process of moving from the beginning of a session to its completion, regardless of the outcome. Spotting: When an area is being actively monitored for indications of concern and potential emergency. This Session Refers to a session or spotting that's currently active in the present. Timestamp: UNIX Timestamp, which indicates seconds since January 1st, 1970. This is used for calculations, since Home Assistant can't do this directly in Datetime format. Tutorial: A session flow which includes on-screen and/or audio explanations of what's going on, for users unfamiliar with YERP. If temporary mode is turned on, only the next session flow will take place with these added prompts. Visitor: Anyone being spotted by YERP! Wellness Check: When YERP!'s spotting threshold timer expires, this the prompt for human intervention to see if a visitor is alright.","title":"Glossary"},{"location":"Reference/Sources/","text":"Sources \u00b6 Hepatitis A outbreak spreads in Philly among drug users, homeless https://www.phillyvoice.com/hepatitis-a-outbreak-philadelphia-kensington/ **Health Department Warns of Potential Hepatitis A Exposure in Kensington https://www.phila.gov/2019-08-16-health-department-warns-of-potential-hepatitis-a-exposure-in-kensington/ Hepatitis A is spreading through poop on the streets. Philly is betting public bathrooms can stem the outbreak. https://whyy.org/articles/hepatitis-a-is-spreading-through-poop-on-the-streets-philly-is-betting-public-bathrooms-can-stem-the-outbreak/ How Technology Is Rapidly Advancing Overdose-Resistant Bathrooms https://filtermag.org/how-technology-is-rapidly-advancing-overdose-resistant-bathrooms/ Public bathrooms become clandestine epicenter of opioid crisis https://www.chicagotribune.com/news/ct-met-public-bathrooms-opioid-overdose-20180510-story.html Survival Strategies While Using Drugs Alone from People Who Use Drugs https://www.vitalstrategies.org/resources/pwudproviderguide/ **Between Care and Control: Examining Surveillance Practices in Harm Reduction https://journals.sagepub.com/doi/epub/10.1177/00914509221128598","title":"Sources"},{"location":"Reference/Sources/#sources","text":"Hepatitis A outbreak spreads in Philly among drug users, homeless https://www.phillyvoice.com/hepatitis-a-outbreak-philadelphia-kensington/ **Health Department Warns of Potential Hepatitis A Exposure in Kensington https://www.phila.gov/2019-08-16-health-department-warns-of-potential-hepatitis-a-exposure-in-kensington/ Hepatitis A is spreading through poop on the streets. Philly is betting public bathrooms can stem the outbreak. https://whyy.org/articles/hepatitis-a-is-spreading-through-poop-on-the-streets-philly-is-betting-public-bathrooms-can-stem-the-outbreak/ How Technology Is Rapidly Advancing Overdose-Resistant Bathrooms https://filtermag.org/how-technology-is-rapidly-advancing-overdose-resistant-bathrooms/ Public bathrooms become clandestine epicenter of opioid crisis https://www.chicagotribune.com/news/ct-met-public-bathrooms-opioid-overdose-20180510-story.html Survival Strategies While Using Drugs Alone from People Who Use Drugs https://www.vitalstrategies.org/resources/pwudproviderguide/ **Between Care and Control: Examining Surveillance Practices in Harm Reduction https://journals.sagepub.com/doi/epub/10.1177/00914509221128598","title":"Sources"},{"location":"Setup/Configuration/","text":"","title":"Configuration"},{"location":"Setup/Hardware/","text":"","title":"Hardware"},{"location":"Setup/Installation/","text":"","title":"Installation"},{"location":"Setup/Quicktips/","text":"","title":"Quicktips"}]}